#!/bin/bash

set -euo pipefail
set -x

# Activate conda environment
source ~/miniforge3/etc/profile.d/conda.sh
conda activate rna-tools

# Number of threads
THREADS=32

# Define directories
RAW_DIR="/raid/VIDRL-USERS/HOME/aduncan/projects/rna_pipeline/mgp_test_data/rawdata"
PREPROC_DIR="/raid/VIDRL-USERS/HOME/aduncan/projects/rna_pipeline/mgp_test_data/preproc"
INTERMEDIATE_DIR="/raid/VIDRL-USERS/HOME/aduncan/projects/rna_pipeline/mgp_test_data/intermediary_files"

# Create output directories
mkdir -p "$PREPROC_DIR" "$INTERMEDIATE_DIR"

# Loop through samples
for R1 in "$RAW_DIR"/*_R1_001.fastq.gz; do
    SAMPLE=$(basename "$R1" _R1_001.fastq.gz)
    R2="${R1/_R1_001.fastq.gz/_R2_001.fastq.gz}"

    echo "=========="
    echo "Processing sample: $SAMPLE"
    echo "=========="

    # Define file paths
    STATS1="$INTERMEDIATE_DIR/${SAMPLE}_stats1.json"
    PHIX_R1="$INTERMEDIATE_DIR/${SAMPLE}_phix_R1.fastq.gz"
    PHIX_R2="$INTERMEDIATE_DIR/${SAMPLE}_phix_R2.fastq.gz"
    RRNA_R1="$INTERMEDIATE_DIR/${SAMPLE}_rrna_R1.fastq.gz"
    RRNA_R2="$INTERMEDIATE_DIR/${SAMPLE}_rrna_R2.fastq.gz"
    DEDUP_R1="$INTERMEDIATE_DIR/${SAMPLE}_dedup_R1.fastq.gz"
    DEDUP_R2="$INTERMEDIATE_DIR/${SAMPLE}_dedup_R2.fastq.gz"
    ADAPT_R1="$INTERMEDIATE_DIR/${SAMPLE}_adapt_R1.fastq.gz"
    ADAPT_R2="$INTERMEDIATE_DIR/${SAMPLE}_adapt_R2.fastq.gz"
    POLY_R1="$INTERMEDIATE_DIR/${SAMPLE}_poly_R1.fastq.gz"
    POLY_R2="$INTERMEDIATE_DIR/${SAMPLE}_poly_R2.fastq.gz"
    NTRIM_R1="$INTERMEDIATE_DIR/${SAMPLE}_ntrim_R1.fastq.gz"
    NTRIM_R2="$INTERMEDIATE_DIR/${SAMPLE}_ntrim_R2.fastq.gz"
    QTRIM_R1="$INTERMEDIATE_DIR/${SAMPLE}_qtrim_R1.fastq.gz"
    QTRIM_R2="$INTERMEDIATE_DIR/${SAMPLE}_qtrim_R2.fastq.gz"
    CLEANED_R1="$PREPROC_DIR/${SAMPLE}_cleaned_R1.fastq.gz"
    CLEANED_R2="$PREPROC_DIR/${SAMPLE}_cleaned_R2.fastq.gz"
    STATS2="$PREPROC_DIR/${SAMPLE}_stats2.json"

    # Step 1: Stats on raw input
    hts_Stats -t "$THREADS" -1 "$R1" -2 "$R2" -L "$STATS1" -F

    # Step 2: Remove phiX
    hts_SeqScreener -t "$THREADS" -1 "$R1" -2 "$R2" phix -o "$PHIX_R1" -o "$PHIX_R2"

    # Step 3: Screen for rRNA (count only, no removal)
    hts_SeqScreener -t "$THREADS" -1 "$PHIX_R1" -2 "$PHIX_R2" rrna -o "$RRNA_R1" -o "$RRNA_R2"

    # Step 4: UMI-tools dedup
    if [[ -f "$RRNA_R1" && -f "$RRNA_R2" ]]; then
        umi_tools dedup --stdin="$RRNA_R1" --stdout="$DEDUP_R1"
        umi_tools dedup --stdin="$RRNA_R2" --stdout="$DEDUP_R2"
    else
        echo "Missing rRNA-screened files for $SAMPLE, skipping."
        continue
    fi

    # Step 5: Adapter trimming
    hts_AdapterTrimmer -t "$THREADS" -1 "$DEDUP_R1" -2 "$DEDUP_R2" -o "$ADAPT_R1" -o "$ADAPT_R2"

    # Step 6: Poly-A/T trimming
    hts_PolyATTrim -t "$THREADS" -1 "$ADAPT_R1" -2 "$ADAPT_R2" -o "$POLY_R1" -o "$POLY_R2"

    # Step 7: N trimming
    hts_NTrimmer -t "$THREADS" -1 "$POLY_R1" -2 "$POLY_R2" -o "$NTRIM_R1" -o "$NTRIM_R2"

    # Step 8: Quality trimming
    hts_QWindowTrim -t "$THREADS" -1 "$NTRIM_R1" -2 "$NTRIM_R2" -o "$QTRIM_R1" -o "$QTRIM_R2"

    # Step 9: Length filter (â‰¥ 50bp)
    hts_LengthFilter -t "$THREADS" -1 "$QTRIM_R1" -2 "$QTRIM_R2" --min-length 50 -o "$CLEANED_R1" -o "$CLEANED_R2"

    # Step 10: Stats on cleaned reads
    hts_Stats -t "$THREADS" -1 "$CLEANED_R1" -2 "$CLEANED_R2" -L "$STATS2" -F

    echo "Finished processing sample: $SAMPLE"
done

echo "=========="
echo "Pipeline run completed!"
echo "=========="
